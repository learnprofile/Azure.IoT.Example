# ------------------------------------------------------------------------------------------------------------------------
# Build for IoT Function App Processor for the IoT Demo Project
# ------------------------------------------------------------------------------------------------------------------------
# Create a variable group for each environment with these variables:
#   subscriptionNameDev: '<ServiceConnectionName / Subscription Name>'
#   functionAppNameDev: 'lll-iotdemo-process-dev'
#   subscriptionNameQA: '<ServiceConnectionName / Subscription Name>'
#   functionAppNameQA: 'lll-iotdemo-process-qa'
# ------------------------------------------------------------------------------------------------------------------------
name: $(date:yyyy).$(date:MM).$(date:dd)$(rev:.r)
pool:
  vmImage: 'windows-latest'

# ------------------------------------------------------------------------------------------------------------------------
#trigger: none # fire this manually for now
trigger:
  branches:
    include: 
      - main
  paths:
    include:
      - FunctionApp
    exclude: 
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.bicep'

# ------------------------------------------------------------------------------------------------------------------------
variables:
  - name: workingDirectory
    value: '$(System.DefaultWorkingDirectory)/FunctionApp/IoT.Processor'
  - group: IoTDemo-Deploy-FunctionApp

# ------------------------------------------------------------------------------------------------------------------------
stages:
- stage: BuildProgram
  displayName: Build Program
  jobs:
  - job: Build
    displayName: Build

    steps:
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: build
        projects: $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop


# ------------------------------------------------------------------------------------------------------------------------
- stage: DeployDEV
  displayName: Dev Deploy Stage
  dependsOn: BuildProgram
  condition: succeeded()

  jobs:
  - deployment: DeployDev
    displayName: Deploy DEV
    environment: 'DEV'

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure Function App Deploy'
            inputs:
              azureSubscription: '$(subscriptionNameDev)'
              appType: functionApp
              appName: $(functionAppNameDev)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

# ------------------------------------------------------------------------------------------------------------------------
- stage: DeployQA
  displayName: QA Deploy Stage
  dependsOn: DeployDev
  condition: succeeded()

  jobs:
  - deployment: DeployQA
    displayName: Deploy QA
    environment: 'QA'

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure Function App Deploy'
            inputs:
              azureSubscription: '$(subscriptionNameQA)'
              appType: functionApp
              appName: $(functionAppNameQA)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'

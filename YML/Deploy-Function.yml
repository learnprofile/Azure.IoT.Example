# ------------------------------------------------------------------------------------------------------------------------
# Build for IoT Function App Processor for the IoT Demo Project
# ------------------------------------------------------------------------------------------------------------------------
# Create a variable group for each environment with these variables:
#   subscriptionNameDev: '<ServiceConnectionName / Subscription Name>'
#   functionAppNameDev: 'lll-iotdemo-process-dev'
#   subscriptionNameQA: '<ServiceConnectionName / Subscription Name>'
#   functionAppNameQA: 'lll-iotdemo-process-qa'
# ------------------------------------------------------------------------------------------------------------------------
name: $(date:yyyy).$(date:MM).$(date:dd)$(rev:.r)
pool:
  vmImage: 'windows-latest'

# ------------------------------------------------------------------------------------------------------------------------
#trigger: none # fire this manually for now
trigger:
  branches:
    include: 
      - main
  paths:
    exclude: 
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.bicep'

# ------------------------------------------------------------------------------------------------------------------------
variables:
  - group: 'IoTDemo-Deploy-FunctionApp'

# ------------------------------------------------------------------------------------------------------------------------
stages:
- stage: BuildProgram
  displayName: Build Program
  jobs:
  - job: Build
    displayName: Build

    steps:
    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '-- configuration Release'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        publishWebProjects: false
        zipAfterPublish: true
        projects: '**/*.csproj'
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/code/'

    - task: PublishBuildArtifacts@1
      displayName: 'Save artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/code/'
        ArtifactName: 'Code'
        publishLocation: Container                        

# ------------------------------------------------------------------------------------------------------------------------
- stage: DeployDEV
  displayName: Dev Deploy Stage
  dependsOn: BuildProgram
  condition: succeeded()

  jobs:
  - deployment: DeployDev
    displayName: Deploy DEV
    environment: 'DEV'

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(subscriptionNameDev)'
              appType: functionAppLinux
              appName: $(functionAppNameDev)
              package: $(Pipeline.Workspace)/Code/*.zip

# ------------------------------------------------------------------------------------------------------------------------
- stage: DeployQA
  displayName: QA Deploy Stage
  dependsOn: DeployDev
  condition: succeeded()

  jobs:
  - deployment: DeployQA
    displayName: Deploy QA
    environment: 'QA'

    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure functions app deploy'
            inputs:
              azureSubscription: '$(subscriptionNameQA)'
              appType: functionAppLinux
              appName: $(functionAppNameQA)
              package: $(Pipeline.Workspace)/Code/*.zip
